#version: '3.8'

services:
  config-server:
    image: nanomarket/config-server:latest
    container_name: config-server
    build:
      context: ./ConfigServer
      dockerfile: Dockerfile
#    volumes:
#      - ./ConfigServer/src/main/resources/config:/app/config
#    ports:
#      - "8071:8071"
    networks:
      - backend
    environment:
#      - GIT_SSH_PRIVATE_KEY=${GIT_SSH_PRIVATE_KEY}
      - SPRING_PROFILES_ACTIVE=git
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/RylovK/nanomarket-config-repo.git
      - SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME=RylovK
      - SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD=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
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://config-server:8071/actuator/health" ]
#      interval: 15s
#      timeout: 10s
#      retries: 5
#      start_period: 30s


  postgres:
    image: postgres:17
    container_name: postgres_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: nanomarket_db
      PGDATA: /var/lib/postgresql/data/pgdata
#    ports:
#      - "5433:5432"
    volumes:
      - ./nanomarket_db_data:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d nanomarket_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - backend

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioaccesskey
      MINIO_ROOT_PASSWORD: miniosecretkey
#      MINIO_BUCKETS: BrandImage, ProductImage
#    Please use MINIO_ROOT_USER and MINIO_ROOT_PASSWORD

    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_data:/data
#    command: server /data
    command: server /minio-image/storage --console-address :9001
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7.4.1
    container_name: redis_container
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=redis_password
#      - REDIS_PORT=6379
#      - REDIS_DATABASES=16
#    ports:
#      - "6379:6379"
    volumes:
      - ./redis_data:/data
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 3
    networks:
      - backend

  eureka:
    image: nanomarket/eureka-server:latest
    container_name: eureka
    build:
      context: ./EurekaServer
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
#    depends_on:
#      config-server:
#        condition: service_healthy
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka:8070/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-service:
    image: nanomarket/productservice:latest
    container_name: product-service
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
#    depends_on:
#      eureka:
#        condition: service_healthy
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: on-failure

  cart-service:
    image: nanomarket/cartservice:latest
    container_name: cart-service
    build:
      context: ./CartService
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
#    depends_on:
#      eureka:
#        condition: service_healthy
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: on-failure

  order-service:
    image: nanomarket/orderservice:latest
    container_name: order-service
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - eureka
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    restart: on-failure

volumes:
  nanomarket_db_data:
  minio_data:
  redis_data:
networks:
  backend:
    driver: bridge
